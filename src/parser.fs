// Implementation file for parser generated by fsyacc
module parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "lib/parser.fsy"


# 9 "lib/parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | CHAR of (char)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_CHAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startsyntax
    | NONTERM_syntax

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | CHAR _ -> 0 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_CHAR 
  | 3 -> TOKEN_end_of_input
  | 1 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startsyntax 
    | 1 -> NONTERM_syntax 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 3 
let _fsyacc_tagOfErrorTerminal = 1

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | CHAR _ -> "CHAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;|]
let _fsyacc_action_rows = 2
let _fsyacc_actionTableElements = [|0us;16385us;0us;49152us;|]
let _fsyacc_actionTableRowOffsets = [|0us;1us;|]
let _fsyacc_reductionSymbolCounts = [|1us;0us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;|]
let _fsyacc_immediateActions = [|65535us;49152us;|]
let _fsyacc_reductions = lazy [|
# 66 "lib/parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startsyntax));
# 75 "lib/parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 8 "lib/parser.fsy"
                              
                   )
# 8 "lib/parser.fsy"
                 : unit));
|]
# 86 "lib/parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 4;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let syntax lexer lexbuf : unit =
    engine lexer lexbuf 0 :?> _
